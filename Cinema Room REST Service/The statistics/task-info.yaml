type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |-
    package cinema.model;

    import java.util.ArrayList;
    import java.util.List;


    public class Seat {
        private int totalRows = 9;
        private int totalColumns = 9;


        public List<String> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<String> availableSeats) {
            this.availableSeats = availableSeats;
        }

        private static List<String> availableSeats = new ArrayList<String>();
        public static void addAvailableSeats(){
            for (int i = 1; i < 10; i++) {
                for (int j = 1; j < 10; j++) {
                    StringBuilder strTempo = new StringBuilder();
                    strTempo.append("{" + "row:" +i + ",");
                    strTempo.append(" column:").append(j).append( ",");
                    if (i <= 4) {
                        strTempo.append(" price:" + 10 +"}");
                    } else {
                        strTempo.append(" price:" + 8 +"}");
                    }
                    availableSeats.add(strTempo.toString());
                }

            }
        }
        private static Seat seatInstance;
        private Seat(){

        }
        public static Seat getInstance(){
            addAvailableSeats();
            if (seatInstance==null){
                seatInstance = new Seat();
            }
            return seatInstance;
        }


        @Override
        public String toString() {

            return '{'+
                    "total_rows:" + totalRows +
                    ", total_columns:" + totalColumns +
                    ", available_seats:" + availableSeats+
                    '}';
        }

        public int getTotalRows () {
                return totalRows;
            }

            public void setTotalRows ( int totalRows){
                this.totalRows = totalRows;
            }

            public int getTotalColumns () {
                return totalColumns;
            }

            public void setTotalColumns ( int totalColumns){
                this.totalColumns = totalColumns;
            }


        }
  learner_created: true
- name: src/cinema/controller/ReturnController.java
  visible: true
  text: |
    package cinema.controller;


    import cinema.model.BookedSeat;
    import cinema.model.Token;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.UUID;
    import java.util.logging.Logger;

    @RestController
    @RequestMapping("/return")
    public class ReturnController {
        BookedSeat bookedSeat = BookedSeat.getInstance();

        Logger logger = Logger.getAnonymousLogger();


        @PostMapping
        ResponseEntity<String> refund(@RequestBody Token token)  {

            if (bookedSeat.getBookedSeats().containsKey(token.getToken())) {

                String response = "{"+bookedSeat.getBookedSeats().get(token.getToken()).toString("returned_ticket") + "}";
                bookedSeat.getBookedSeats().remove(token.getToken());
                return ResponseEntity.ok(response);

            }


            return new ResponseEntity<>("""
                    {
                        "error": "Wrong token!"
                    }""", HttpStatus.BAD_REQUEST);
        }


    }
  learner_created: true
- name: src/cinema/model/BookedSeat.java
  visible: true
  text: |
    package cinema.model;

    import java.util.HashMap;
    import java.util.UUID;

    public class BookedSeat {
        HashMap<String,SeatUnit> bookedSeats = new HashMap<>();
        private static BookedSeat bookedSeatInstance;
        private BookedSeat(){

        }
        public static BookedSeat getInstance(){
            if (bookedSeatInstance == null) {
                bookedSeatInstance = new BookedSeat();
            }
            return bookedSeatInstance;
        }

        public static BookedSeat getBookedSeatInstance() {
            return bookedSeatInstance;
        }



        public HashMap<String, SeatUnit> getBookedSeats() {
            return bookedSeats;
        }

        public void setBookedSeats(HashMap<String, SeatUnit> bookedSeats) {
            this.bookedSeats = bookedSeats;
        }
    }
  learner_created: true
- name: src/cinema/controller/SeatsController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.model.Seat;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    @RequestMapping("/seats")
    public class SeatsController {
        Seat seatInfo = Seat.getInstance();

        @GetMapping
        public String getSeatInfo(){

            return seatInfo.toString();
        }
    }
  learner_created: true
- name: src/cinema/model/PurchasedSeat.java
  visible: true
  text: |
    package cinema.model;
    import java.util.UUID;

    public class PurchasedSeat {
        private UUID token;
        private SeatUnit seatUnit;

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public SeatUnit getSeatUnit() {
            return seatUnit;
        }

        public void setSeatUnit(SeatUnit seatUnit) {
            this.seatUnit = seatUnit;
        }

        @Override
        public String toString() {
            return "{" +
                    '"'+ "token"+ '"'+  ":" + '"'+token +'"' + "," +
                    seatUnit.toString("ticket") +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/model/SeatUnit.java
  visible: true
  text: |
    package cinema.model;

    public class SeatUnit {
        private int row;
        private int column;
        private int price;

        public int getPrice() {
            return price;
        }

        public void setPrice() {
            if (row <= 4) {
                this.price = 10;
            } else {
                this.price = 8;
            }

        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public void setPrice(int price) {
            this.price = price;
        }


        public String toString(String type) {
            return "\n"+ '"'+ type+'"'+ ": {" +
                    "row=" + row +
                    ", column=" + column  +
                    ", price=" +price +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/model/Response.java
  visible: true
  text: |
    package cinema.model;

    public class Response {

    }
  learner_created: true
- name: src/cinema/config/AppConfig.java
  visible: true
  text: |
    package cinema.config;

    import org.springframework.context.annotation.Configuration;

    @Configuration
    public class AppConfig {


    }
  learner_created: true
- name: src/cinema/controller/PurchaseController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.model.BookedSeat;
    import cinema.model.PurchasedSeat;
    import cinema.model.Seat;
    import cinema.model.SeatUnit;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.UUID;

    @RestController
    @RequestMapping("/purchase")
    public class PurchaseController {

        List<String> purchasedSeats = new ArrayList<String>();
        PurchasedSeat purchasedSeat = new PurchasedSeat();
        BookedSeat bookedSeat = BookedSeat.getInstance();
        HashMap<String, SeatUnit> hashTempo = new HashMap<>();


        @PostMapping()
        ResponseEntity<String> successResponse(@RequestBody SeatUnit seatUnit) {
            Seat.addAvailableSeats();
            if (purchasedSeats.contains("Seat No" + seatUnit.getRow() + seatUnit.getColumn())) {
                return new ResponseEntity<>("{\"error\": \"The ticket has been already purchased!\"}", HttpStatus.BAD_REQUEST);
            }

            if (seatUnit.getColumn() <= 9 && seatUnit.getColumn() > 0 && seatUnit.getRow() <= 9 && seatUnit.getRow() > 0) {

                purchasedSeats.add("Seat No" + seatUnit.getRow() + seatUnit.getColumn());
                SeatUnit returnSeat = new SeatUnit();
                returnSeat.setRow(seatUnit.getRow());
                returnSeat.setColumn(seatUnit.getColumn());
                returnSeat.setPrice();
                UUID randomTokenTempo = UUID.randomUUID();

                purchasedSeat.setToken(randomTokenTempo);
                purchasedSeat.setSeatUnit(returnSeat);
                hashTempo.put(randomTokenTempo.toString(), returnSeat);
                bookedSeat.setBookedSeats(hashTempo);


                return ResponseEntity.ok(purchasedSeat.toString());
            }

            return new ResponseEntity<>("{\"error\": \"The number of a row or a column is out of bounds!\"}", HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/model/Token.java
  visible: true
  text: |
    package cinema.model;

    import java.util.UUID;

    public class Token {
        private String token;

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/controller/StatsController.java
  visible: true
  learner_created: true
- name: src/cinema/repo/StatsRepo.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Mon, 06 Feb 2023 23:35:26 UTC"
record: -1
